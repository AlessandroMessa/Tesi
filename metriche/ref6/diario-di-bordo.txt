far√≤ a meno del grafo di UnderStand perch√© secondo me √® useless, non fa vedere le dipendenze interne ai package

üìå Rifattorizzazione dello smell "Hub-Like Dependency" in BaseController
Contesto
Nel progetto RuoYi-Cloud, la classe BaseController situata nel package com.ruoyi.common.core.web.controller rappresentava un classico esempio di smell Hub-Like Dependency. Essa presentava un peso di 18 secondo l'analisi effettuata tramite Arcan e risultava centralizzante, in quanto veniva estesa da gran parte dei controller web del sistema e conteneva numerose responsabilit√†:

Conversione automatica di date (@InitBinder);

Gestione della paginazione e dell‚Äôordinamento (metodi startPage, startOrderBy, getDataTable);

Costruzione di risposte HTTP standard (AjaxResult);

Logging;

Utility varie.

Questa struttura violava i principi di Single Responsibility e Separation of Concerns, generando un alto grado di accoppiamento e un punto centrale fragile nella logica web dell‚Äôapplicazione.

Obiettivo del refactoring
L‚Äôobiettivo era eliminare lo smell Hub-Like Dependency riducendo le responsabilit√† della classe BaseController, senza compromettere la retrocompatibilit√† o introdurre duplicazione di codice nei controller applicativi.

Strategia di rifattorizzazione
Abbiamo applicato una strategia basata sulla separazione delle responsabilit√† attraverso l‚Äôestrazione di componenti specializzati. In particolare, sono state create tre nuove classi:

PaginationSupport: per la gestione della paginazione e dell‚Äôordinamento.

AjaxResponseBuilder: per la creazione di risposte standard di tipo AjaxResult.

DateBinderConfigurator: per la configurazione di conversioni automatiche di tipo Date.

Queste classi sono state collocate in package dedicati, ad esempio:

Copia
Modifica
com.ruoyi.common.core.support.pagination
com.ruoyi.common.core.support.response
com.ruoyi.common.core.support.binder
In seguito, BaseController √® stato semplificato radicalmente: non implementa pi√π logica direttamente, ma funge solo da facciata leggera che delegata alle tre classi helper. Questo ha permesso di mantenere retrocompatibilit√† totale con i controller esistenti, evitando la necessit√† di modificarli.

Valutazione post-rifattorizzazione
La nuova versione di BaseController:

non presenta pi√π responsabilit√† multiple;

non contiene codice logico diretto;

non dipende da numerose utility o componenti esterni;

non ha pi√π un ruolo accentratore all‚Äôinterno del package controller.

Dal punto di vista dell‚Äôanalisi Arcan, la classe non risulta pi√π uno hub significativo, contribuendo alla riduzione del debito tecnico architetturale nel modulo common-core.

Conclusione
Questa rifattorizzazione ha permesso di:

rimuovere efficacemente lo smell Hub-Like Dependency;

migliorare la manutenibilit√† e testabilit√† del sistema;

rispettare i principi di progettazione come SRP, Low Coupling, e Composizione over Ereditariet√†.

Questa strategia pu√≤ essere applicata anche ad altre classi simili (es. ExcelUtil, OmsPortalOrderServiceImpl, ecc.) per proseguire nella riduzione sistematica del debito architetturale.

